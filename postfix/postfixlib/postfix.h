#pragma once
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <cmath>
#include "..\stack\stacklib\stacklib.h"
#include "func.h"
using namespace std;

/*
* Выполнил: Филатьев В.
* Библиотека для преобразования выражения в постфиксную форму и поиска ответа,
* также возможно вычислить выражения с переменными
*/

const double PI = 3.141592653589793; ///<Число пи
const double E  = 2.718281828459045; ///<Число е

//Удаление пробелов
/*!
* Функция удаления пробелов из строки
* \param[out] выходной параметр string, выражение с пробелами
* \param[in] входной параметр string, выражение без пробелов
*/
string RemoveSpace(string s);

/*!
* Функция удаление не нужных нулей
* \param[out] выходной параметр string, выражение с нулями после запятой
* \param[in] входной параметр string, выражение без нулей после запятой
*/
string Remove0(string s);

/*!
* Проверка на коректность введенной формулы
* \param[out] входной параметр string, выражение формулы
* \param[in] выходной параметр bool, true - если формула записана верно, false - если формула ложна
*/
bool CheckFormula(string s);

/*!
* Функция приводит строку к число начиная с i индекса,
* после выполнения в i находится символ указываюший на конец числа в строке
* \param[out] выходной параметр string, формула
* \param[out] выходной параметр int, индекс первого символа числа в строке
* \param[in] выходной параметр double, полученное число
*/
double ToDouble(string s, int& i);

/*!
* Функция приводит строку к строковой переменной начиная с i индекса,
* после выполнения в i находится символ указываюший на конец числа в строке
* \param[out] выходной параметр string, формула
* \param[out] выходной параметр int, индекс первого символа строковой переменной в строке
* \param[in] выходной параметр string, полученное имя переменной
*/
string ToStringVar(string s, int& i);

/*!
* Функция проверяет символ типа char является ли он числом
* \param[out] выходной параметр char, входной символ
* \param[in] выходной параметр bool,true - если число, false - если не число
*/
bool CheckNumber(char c);

/*!
* Функция проверяет символ типа char является ли буквиным символом
* \param[out] выходной параметр char, входной символ
* \param[in] выходной параметр bool,true - если буквиный символ, false - если не буквиный символ
*/
bool CheckChar(char c);


/*!
* Функция проверяет символ типа char на принадлежность базовым операциям, 
* такие как *,-,+,...
* \param[out] выходной параметр char, входной символ
* \param[in] выходной параметр bool,true - если базовая операция, false - если не базовая операция
*/
bool CheckOperator(char c);

/*!
* Функция проверяет символ типа string на принадлежность базовым операциям,
* такие как *,-,+,...
* \param[out] выходной параметр char, входной символ
* \param[in] выходной параметр bool,true - если базовая операция, false - если не базовая операция
*/
bool CheckOperator(string s);

/*!
* Функция выополняет стандартные операции и возврашает результат его
* \param[out] входной параметр double a - первый аргумент
* \param[out] входной параметр double b - второй аргумент
* \param[out] входной параметр char c - стандартная операция
* \param[in] выходной параметры double - результат выполнения операции
*/
double StandartOperator(double a, double b, char c);

/*!
* Функция проверки на константы Пи и е
* \param[out] входной параметр string - строка выражения
* \param[in] выходной параметры int - 1 если это е, 2 если Пи и 0 если что то другое
*/
int CheckConst(string s);

/*!
* Функция проверки на встроеенные функции в класс
* \param[out] входной параметр string - строка выражения
* \param[in] выходной параметры int - 1 или 2 количестово параметров для функции, 0 если функция не втроенна
*/
int Func(string s);

//Проверка функции
/*!
* Рекурсивная проверка функции на верность введенной формулы с i индекса,
* после выполнения в i находится символ указываюший на конец числа в строке
* \param[out] входной параметр string - строка выражения
* \param[out] входной параметр string - строка функции
* \param[out] входной параметр int - индекс первого символа числа в строке
* \param[in] выходной параметры bool - true если выражение верно записано
*/
bool CheckFunc(string s, string fun, int &i);

/*!
* Вычисление выражение функции
* \param[out] входной параметр string - строкове представление функции
* \param[out] входной параметр double - аргумент для функции
* \param[in] выходной параметры double - результат работы функции
*/
double DuFunc(string fun, double a);

/*!
* Вычисление выражение функции
* \param[out] входной параметр string - строкове представление функции
* \param[out] входной параметр double a - перввый аргумент функции
* \param[out] входной параметр double b - второй аргумент функции
* \param[in] выходной параметры double - результат работы функции
*/
double DuFunc(string fun, double a, double b);

/*!
* Функция проверки на ошибки в записи формулы
* \param[out] входной параметр char - оператор для которогу нужно проверить верность аргументов
* \param[out] входной параметр stak - параметры введенные в стек
* \param[in] выходной параметры bool - результат проверки
*/
bool Eror(char c, MyStack<string>& stack);


/*
* Класс для вычисления выражения с помошью метода постфиксной записи
*/
class calculator {
	string formula; ///<Исходная формула
	string postfix; ///<Постфиксный вид формулы
	map<string, double> var; ///Словарь для хранения значений переменных
	/*!
	* Метод, который выводит приотритет операциям
	* \param[out] входной параметр char - опирация
	* \param[in] выходной параметры int - приоритет данной операции
	*/
	int priority(char c);
public:
	/*!
	* Конструктор по умолчанию
	*/
	calculator();
	/*!
	* Конструктор иницилазации
	* \param[out] входной параметр string - исходная формула
	*/
	calculator(string formula);
	/*!
	* Функция возрашает исходную формулу
	* \param[in] выходной параметр string - возврашает исходную формулу
	*/
	string GetFormula();
	/*!
	* Функция возрашает постфиксную запись формулы
	* \param[in] выходной параметр string - возврашает постфиксную формулу
	*/
	string GetPostfix();
	/*!
	* Функция задает формулу
	* \param[out] выходной параметр string - исходная формула
	*/
	void SetFormula(string formula);
	/*!
	* Функция перевода исходной формулы в постфиксную форму
	*/
	void FormulaConverrt();
	/*!
	* Функция возврашает ответ на введенную формулу
	* \param[out] выходной параметр double - ответ
	*/
	double Ansver();
	/*!
	* Функция возврашает словарь на параметы
	* \param[out] выходной параметр map - список параметров
	*/
	map<string, double> GetVar() { return var; }
	/*!
	* Функция задает параметрам переменных значение
	* \param[in] входной параметр map - список параметров
	*/
	void SetVar(map<string,double> var);
	
};